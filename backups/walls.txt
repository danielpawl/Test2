var wallGeo0 = new THREE.BoxBufferGeometry(45, 35, 1);
			var wallMat = new THREE.MeshStandardMaterial({wallStyle});
			
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping; //color map
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( wallwraps, wallwrapt );
				wallMat.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set( wallwraps, wallwrapt);
				wallMat.normalMap = texture;
				wallMat.needsUpdate = true;
			});

			wall[0] = new Physijs.BoxMesh( wallGeo0, wallMat);
			wall[0].position.set(27.5, 17.5, 50);
			wall[0].receiveShadow = true;
			
			wall[1] = new THREE.Mesh(wallGeo0, wallMat);
			wall[1].position.set(-27.5, 12.5 , 50);
			

			var wallGeo2 = new THREE.BoxBufferGeometry(10,10,1);
			var wallMat2 = new THREE.MeshStandardMaterial({wallStyle});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo2.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo2.parameters.height );
				wallMat2.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo2.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo2.parameters.height);
				wallMat2.normalMap = texture;
				wallMat2.needsUpdate = true; 
			});
			wall[2] = new Physijs.BoxMesh(wallGeo2, wallMat2);
			wall[2].position.set(0, 20, 50);
			

			//wall (garden)
			var wallGeo3 = new THREE.BoxBufferGeometry(10,25, 1);
			var wallMat3 = new THREE.MeshStandardMaterial({wallStyle});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo3.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo3.parameters.height );
				wallMat3.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo3.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo3.parameters.height);
				wallMat3.normalMap = texture;
				wallMat3.needsUpdate = true; 
			});
			wall[3] = new Physijs.BoxMesh(wallGeo3, wallMat3); //wall right
			wall[3].position.set(45, 12.5, -50);

			wall[4] = new Physijs.BoxMesh(wallGeo3, wallMat3); //wall left
			wall[4].position.set(-45, 12.5, -50);

			var wallGeo5 = new THREE.BoxBufferGeometry(80, 5, 1);
			var wallMat5 = new THREE.MeshStandardMaterial({wallStyle});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo5.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo5.parameters.height );
				wallMat5.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo5.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo5.parameters.height);
				wallMat5.normalMap = texture;
				wallMat5.needsUpdate = true; 
			});
			wall[5] = new Physijs.BoxMesh( wallGeo5, wallMat5); //wall top
			wall[5].position.set(0, 22.5, -50);

			var wallGeo6= new THREE.BoxBufferGeometry(20, 1, 1);
			var wallMat6 = new THREE.MeshStandardMaterial({wallStyle});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo6.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo6.parameters.height );
				wallMat6.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo6.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo6.parameters.height);
				wallMat6.normalMap = texture;
				wallMat6.needsUpdate = true; 
			});
			wall[6] = new Physijs.BoxMesh(wallGeo6, wallMat6); //wall left low
			wall[6].position.set(-30, 0.5, -50);
			
			wall[7] = new Physijs.BoxMesh(wallGeo6, wallMat6); //wall right low
			wall[7].position.set(30, 0.5, -50);

			var wallGeo8 = new THREE.BoxBufferGeometry(1, 19, 1);
			var wallMat8 = new THREE.MeshStandardMaterial({wallStyle});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo8.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo8.parameters.height );
				wallMat8.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo8.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo8.parameters.height);
				wallMat8.normalMap = texture;
				wallMat8.needsUpdate = true; 
			});
			wall[8] = new Physijs.BoxMesh(wallGeo8, wallMat8); //wall left between
			wall[8].position.set(-20.5, 10.5, -50);
			wall[9] = new Physijs.BoxMesh(wallGeo8, wallMat8); //wall right between
			wall[9].position.set(20.5, 10.5, -50);

			var wallGeo10 = new THREE.BoxBufferGeometry(100, 25, 1);
			var wallMat10 = new THREE.MeshStandardMaterial([wallStyle]);
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( (wallwraps/wallGeo0.parameters.width) * wallGeo10.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo10.parameters.height );
				wallMat10.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  (wallwraps/wallGeo0.parameters.width) * wallGeo10.parameters.width , (wallwrapt/wallGeo0.parameters.height) *wallGeo10.parameters.height);
				wallMat10.normalMap = texture;
				wallMat10.needsUpdate = true; 
			});

			wall[10] = new Physijs.BoxMesh(wallGeo10, wallMat10); //wall left
			wall[10].position.set(-50, 12.5, 0);
			wall[10].rotation.y = Math.PI /2.0;

			wall[11] = new THREE.Mesh(wallGeo10, wallMat10); //wall right
			wall[11].position.set(50, 12.5, 0);
			wall[11].rotation.y = Math.PI /2.0;
			
			
			var wallGeo12 = new THREE.Shape();
			wallGeo12.moveTo(0, 0);
			wallGeo12.lineTo(0, 35);
			wallGeo12.lineTo(50, 35);
			wallGeo12.lineTo(50, 0);
			
			var wallMat12 = new THREE.MeshStandardMaterial({side: THREE.DoubleSide});
			textureLoader.load('images/textures/stonewall2.jpg', function( map){
				map.wrapS = THREE.RepeatWrapping;
				map.wrapT = THREE.RepeatWrapping;
				map.anisotropy = 4;
				map.repeat.set( 0.3 , 0.3);
				wallMat12.map = map;

				texture = textureLoader.load('images/textures/stonewall2norm.jpg'); //normal map
				texture.wrapS =THREE.RepeatWrapping;
				texture.wrapT = THREE.RepeatWrapping;
				texture.anisotropy = 4;
				texture.repeat.set(  0.4 , 0.4);
				wallMat12.normalMap = texture;
				wallMat12.needsUpdate = true; 
			});


			var wallHole12 = new THREE.Path();
			wallHole12.moveTo(20, 10);
			wallHole12.lineTo(20, 25);
			wallHole12.lineTo(30, 25);
			wallHole12.lineTo(30, 10);

			wallGeo12.holes.push(wallHole12);
			var extrudeSettings = { amount: 1, bevelEnabled: false, depth: 0.2 };
			var wall12 = new THREE.ExtrudeBufferGeometry(wallGeo12, extrudeSettings);
			
			wall[12] = new THREE.Mesh(wall12, wallMat12);
			*/